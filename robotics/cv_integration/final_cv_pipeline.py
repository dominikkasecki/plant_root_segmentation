import logging
import time
from pathlib import Path

import numpy as np
from stable_baselines3 import PPO

from conversion import process_detected_positions, calculate_conversion_factors
from helper_functions import delete_directory, capture_plate_image, pause_for_observation
from ot2_gym_wrapper import OT2Env
from task_8_3 import detect_root_tips

ORIGINAL_IMAGES_FOLDER = Path('./plate_images')  # Path to the folder with input images
PREDICTIONS_FOLDER = Path("./predictions")  # Path to save predictions
MODEL_PATH = Path("model_files/dominik_231643_unet_model_128px.h5")  # Model file path
PATCH_SIZE = 128  # Patch size
BATCH_SIZE = 64  # Batch size
PLATE_POSITION_ROBOT = np.array([0.10775 - 0.0035, 0.088 - 0.026 - 0.0365, 0.2])
PLATE_SIZE_MM = 150
DISTANCE_THRESHOLD = 0.001
BEST_RL_MODEL_PATH = Path("./model_files/rl_best_model_accuracy_0_001")
# BEST_RL_MODEL_PATH = Path("./model_files/")
# Configure logging to display information during testing
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')


def main():
    # Initialize the environment with rendering enabled
    env = OT2Env(seed=42, render=True, max_steps=10000)

    model = PPO.load(str(BEST_RL_MODEL_PATH), env=env)
    # Reset the environment to get the initial observation
    logging.info("Trained RL model loaded successfully.")

    obs, info = env.reset()
    logging.info(f"Environment reset. Initial Observation: {obs}")

    # Clear previous content generated by the pipeline

    delete_directory(ORIGINAL_IMAGES_FOLDER)
    delete_directory(PREDICTIONS_FOLDER)

    # Step 1: Capture the plate image

    image = capture_plate_image(env)

    # Step 2: Detect root tips in the image
    detected_root_positions_image, conversion_values = detect_root_tips(image,
                                                                        original_images_folder=ORIGINAL_IMAGES_FOLDER,
                                                                        predictions_folder=PREDICTIONS_FOLDER,
                                                                        model_path=MODEL_PATH, patch_size=PATCH_SIZE,
                                                                        batch_size=BATCH_SIZE)

    # Define conversion factors
    conversion_factor_x, conversion_factor_y = calculate_conversion_factors(conversion_values, PLATE_SIZE_MM)

    # Adjust X,Y coordinates to match robot's environment system

    detected_root_positions_robot = process_detected_positions(detected_root_positions_image, conversion_factor_x,
                                                               conversion_factor_y, PLATE_POSITION_ROBOT)

    # Step 4: Iterate over each detected root tip position and inoculate
    for idx, root_pos in enumerate(detected_root_positions_robot, start=1):
        logging.info(f"\n=== Inoculating Root Tip {idx} ===")
        logging.info(f"Target Robot Coordinates: {root_pos}")

        # Set the goal position in the environment
        env.goal_position = np.array(root_pos, dtype=np.float32)
        logging.info(f"Setting goal position to: {env.goal_position}")

        done = False
        step = 0
        max_steps_per_goal = 5000  # Maximum steps to reach each goal

        while not done and step < max_steps_per_goal:
            # # Extract current pipette position and goal position from observation
            # current_pipette_pos = obs[:3]
            # goal_position = obs[3:]

            # Use the trained RL model to predict the action
            action, _states = model.predict(obs, deterministic=True)

            # Clip actions to match environment action space
            action = np.clip(action, env.action_space.low, env.action_space.high)
            logging.info(
                f"Step {step + 1}: Predicted Action -> X: {action[0]:.4f}, Y: {action[1]:.4f}, Z: {action[2]:.4f}"
            )
            logging.info(f"Applied Action: {action}")

            # Execute the action in the environment
            obs, reward, terminated, truncated, info = env.step(action)

            # Update current position from the new observation
            current_pipette_pos = obs[:3]
            goal_position = obs[3:]

            # Calculate the distance to the goal
            distance = np.linalg.norm(goal_position - current_pipette_pos)
            logging.info(
                f"Step {step + 1}: Current Position: {current_pipette_pos}, Distance to Goal: {distance:.6f} meters")

            # Check if the robot has reached the goal position
            if distance < DISTANCE_THRESHOLD:  # Threshold:
                logging.info("Goal position reached. Executing inoculation action.")
                # Create a drop action: [x, y, z, drop]
                inoculate_action = np.array([0.0, 0.0, 0.0, 1.0])
                obs, reward, terminated, truncated, info = env.step(inoculate_action)
                logging.info("Inoculation action executed.")

                done = True
                break

            if step == max_steps_per_goal - 1:
                inoculate_action = np.array([0.0, 0.0, 0.0, 1.0])
                _, _, _, _, _ = env.step(inoculate_action)
                done = True
                break
            # Check for episode termination or truncation
            if terminated or truncated:
                logging.warning(
                    f"Episode {'terminated' if terminated else 'truncated'} at step {step + 1}. Resetting environment.")

                obs, info = env.reset()
                done = True
                break

            # Increment step counter
            step += 1

        if step >= max_steps_per_goal:
            logging.warning(f"Reached maximum steps ({max_steps_per_goal}) without reaching target for Root Tip {idx}.")

        if idx == len(detected_root_positions_robot):  # After the last root tip
            pause_for_observation(env, pause_steps=100)

    # Close the environment after all root tips have been inoculated
    time.sleep(10)
    env.close()
    logging.info("All root tips inoculated. Environment closed successfully.")


if __name__ == "__main__":
    main()
